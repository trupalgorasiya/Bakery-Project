from django.contrib import admin
from .models import *
from django.http import HttpResponse
from reportlab.lib.pagesizes import landscape, letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.enums import TA_CENTER
from .models import MainCategory, SubCategory, Product
import matplotlib.pyplot as plt
import io
from reportlab.lib import colors
import datetime
import datetime
from datetime import datetime




#aa add kryu kayk error aavti hati atle report and chart ma 
import matplotlib
matplotlib.use('Agg')  # Use a non-GUI backend
import matplotlib.pyplot as plt





def generate_chart_pdf(title, headers, data, filename):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'
    doc = SimpleDocTemplate(response, pagesize=landscape(letter))
    
    elements = []
    styles = getSampleStyleSheet()

    # Company Header
    logo_path = "static/img/bg-img/logo.png"
    logo = Image(logo_path, width=100, height=50)
    company_details = Paragraph("""
        <para align=center>
        <b><font size=14>Sweet Delights Bakery</font></b><br/>
        22/2, Nehru Nagar Cir, nr. Jay Bhavani Vadapav, opp. L Colony, Ambavadi, Ahmedabad, Gujrat 380015<br/>
        Contact: 94288 58666 | Email: sweetretreat@gmail.com
        </para>
    """, styles['Normal'])

    header_table = Table([[logo, company_details]], colWidths=[110, 400])
    header_table.setStyle(TableStyle([('VALIGN', (0, 0), (-1, -1), 'MIDDLE')]))
    elements.append(header_table)
    elements.append(Spacer(1, 10))

    # Report Title
    title_para = Paragraph(f"<para align=center><b><font size=16>{title}</font></b></para>", styles['Title'])
    elements.append(title_para)
    elements.append(Spacer(1, 10))

    # Generate Pie Chart
    fig, ax = plt.subplots(figsize=(5, 3))
    labels = [row[0] for row in data]
    values = [row[1] for row in data]
    
    ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90, colors=['#ff9999','#66b3ff','#99ff99','#ffcc99'])
    ax.set_title(title)

    # Save chart as image
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    plt.close()
    
    img_buffer.seek(0)
    chart_image = Image(img_buffer, width=400, height=250)
    elements.append(chart_image)

    # Footer
    def footer(canvas, doc):
        canvas.saveState()
        footer_text = Paragraph("<para align=center><b>This report has been generated by the Sweet Delights Bakery admin</b></para>", styles['Normal'])
        footer_text.wrapOn(canvas, 500, 20)
        footer_text.drawOn(canvas, 150, 30)
        canvas.drawRightString(750, 20, f"Page {doc.page}")
        canvas.restoreState()

    doc.build(elements, onFirstPage=footer, onLaterPages=footer)
    return response

def generate_order_chart(modeladmin, request, queryset):
    headers = ["Order Status", "Count"]
    data = {}
    for order in queryset:
        status = order.delivery_status
        data[status] = data.get(status, 0) + 1

    formatted_data = [[status, count] for status, count in data.items()]
    return generate_chart_pdf("Order Status Chart", headers, formatted_data, "order_chart.pdf")

def generate_payment_chart(modeladmin, request, queryset):
    headers = ["Payment Method", "Total Payments"]
    data = {}
    for payment in queryset:
        method = payment.payment_method
        data[method] = data.get(method, 0) + 1

    formatted_data = [[method, count] for method, count in data.items()]
    return generate_chart_pdf("Payment Method Chart", headers, formatted_data, "payment_chart.pdf")

generate_order_chart.short_description = "Download Order Chart"
generate_payment_chart.short_description = "Download Payment Chart"

def generate_pdf_report(title, headers, data, filename):
    response = HttpResponse(content_type='application/pdf')
    response['Content-Disposition'] = f'attachment; filename="{filename}"'

    doc = SimpleDocTemplate(response, pagesize=landscape(letter))
    elements = []
    styles = getSampleStyleSheet()

    # Company Header
    logo_path = "static/img/bg-img/logo.png"  # Update with actual path
    logo = Image(logo_path, width=100, height=50)
    company_details = Paragraph("""
        <para align=center>
        <b><font size=14>Sweet Delights Bakery</font></b><br/>
        22/2, Nehru Nagar Cir, nr. Jay Bhavani Vadapav, opp. L Colony, Ambavadi, Ahmedabad, Gujrat 380015<br/>
        Contact:  94288 58666 | Email: sweetretreat@gmail.com
        </para>
    """, styles['Normal'])

    header_table = Table([[logo, company_details]], colWidths=[110, 400])
    header_table.setStyle(TableStyle([('VALIGN', (0, 0), (-1, -1), 'MIDDLE')]))
    elements.append(header_table)
    elements.append(Spacer(1, 10))

    # Report Title
    title_para = Paragraph(f"<para align=center><b><font size=16>{title}</font></b></para>", styles['Title'])
    elements.append(title_para)
    elements.append(Spacer(1, 10))

    # Auto-adjust column widths
    col_widths = [70, 100, 120, 90, 180, 80, 90, 120]  # Adjust based on content

    # Format datetime fields & wrap text properly
    formatted_data = []
    for row in data:
        new_row = []
        for item in row:
            if isinstance(item, datetime):
                item = item.strftime('%Y-%m-%d %H:%M:%S')  # Format datetime properly
            new_row.append(Paragraph(str(item), styles["Normal"]))
        formatted_data.append(new_row)

    # Table Data
    table_data = [headers] + formatted_data
    table = Table(table_data, colWidths=col_widths)

    # Table Styling
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ]))

    # Apply alternating row colors
    for i in range(1, len(table_data)):
        bg_color = colors.lightgrey if i % 2 == 0 else colors.white
        table.setStyle(TableStyle([('BACKGROUND', (0, i), (-1, i), bg_color)]))

    elements.append(table)
    elements.append(Spacer(1, 20))

    # Footer
    def footer(canvas, doc):
        canvas.saveState()
        footer_text = Paragraph("<para align=center><b>This report has been generated by the Sweet Delights Bakery admin</b></para>", styles['Normal'])
        footer_text.wrapOn(canvas, 500, 20)
        footer_text.drawOn(canvas, 150, 30)
        canvas.drawRightString(750, 20, f"Page {doc.page}")
        canvas.restoreState()

    doc.build(elements, onFirstPage=footer, onLaterPages=footer)
    return response


def generate_user_report(modeladmin, request, queryset):
    headers = ["User ID", "Name", "Email", "Contact No", "Address", "DOB"]
    data = [[user.user_id, user.first_name, user.email_id, user.contact_no, user.address, user.dob_date] for user in queryset]
    return generate_pdf_report("User Report", headers, data, "user_report.pdf")

def generate_category_report(modeladmin, request, queryset):
    headers = ["Main Category", "Subcategory", "Product Name", "Price Options", "Stock"]
    data = []
    for main_category in MainCategory.objects.all():
        subcategories = SubCategory.objects.filter(main_category=main_category)
        if not subcategories.exists():
            data.append([main_category.name, "No Subcategories", "", "", ""])
            continue
        for subcategory in subcategories:
            products = Product.objects.filter(subcategory=subcategory)
            if not products.exists():
                data.append([main_category.name, subcategory.name, "No Products", "", ""])
                continue
            for product in products:
                price_options = ", ".join(product.price_options) if product.price_options else "N/A"
                data.append([main_category.name, subcategory.name, product.name, price_options, product.stock])
    return generate_pdf_report("Main Category, Sub Category & Product Report", headers, data, "category_report.pdf")

def generate_order_report(modeladmin, request, queryset):
    headers = ["Order ID", "Customer Name", "Total Amount", "Status"]
    data = [[order.order_id, order.user.first_name, order.total_amount, order.delivery_status] for order in queryset]
    return generate_pdf_report("Order Report", headers, data, "order_report.pdf")
def generate_product_payment_report(modeladmin, request, queryset):
    headers = ["Payment ID",  "Date", "Method", "Total Amount", "Status"]
    data = [[payment.payment_id,  payment.payment_datetime, payment.payment_method, payment.total_amount, payment.status] for payment in queryset]
    return generate_pdf_report("Product Payment Report", headers, data, "product_payment_report.pdf")

def generate_custom_cake_order_report(modeladmin, request, queryset):
    headers = ["Order ID", "User", "Status", "Pickup Date", "Created At"]
    data = [[order.id, order.user,  order.status, order.pickup_date, order.created_at] for order in queryset]
    return generate_pdf_report("Custom Cake Order Report", headers, data, "custom_cake_order_report.pdf")

def generate_order_cancel_report(modeladmin, request, queryset):
    headers = ["Cancel ID", "Order ID", "Cancel Date"]
    data = [[cancel.cancel_id, cancel.order.order_id,  cancel.cancel_datetime] for cancel in queryset]
    return generate_pdf_report("Order Cancellation Report", headers, data, "order_cancellation_report.pdf")

def generate_order_cancel_details_report(modeladmin, request, queryset):
    headers = ["Cancel Detail ID", "Order ID", "Product", "Reason", "Quantity", "Refund Status", "Refund Amount"]
    data = [[detail.cancel_detail_id, detail.cancel.order.order_id, detail.product, detail.cancel_reason, detail.quantity_canceled, detail.refund_status, detail.refund_amount] for detail in queryset]
    return generate_pdf_report("Order Cancellation Details Report", headers, data, "order_cancellation_details_report.pdf")

def generate_order_return_report(modeladmin, request, queryset):
    headers = ["Return ID", "Order ID", "Return Date"]
    data = [[return_obj.return_id, return_obj.order.order_id, return_obj.return_datetime] for return_obj in queryset]
    return generate_pdf_report("Order Return Report", headers, data, "order_return_report.pdf")

def generate_order_return_details_report(modeladmin, request, queryset):
    headers = ["Return Detail ID", "Order ID", "Product", "Reason", "Quantity", "Return Status", "Refund Status"]
    data = [[detail.return_detail_id, detail.order_return.order.order_id, detail.order_detail.product, detail.return_reason, detail.quantity_returned, detail.return_status, detail.refund_status] for detail in queryset]
    return generate_pdf_report("Order Return Details Report", headers, data, "order_return_details_report.pdf")

def generate_review_report(modeladmin, request, queryset):
    headers = ["Product", "User", "Rating", "Comment", "Created At"]
    data = [[review.product.name, review.user.first_name, review.rating, review.comment, review.created_at.strftime('%Y-%m-%d %H:%M:%S')] for review in queryset]
    
    return generate_pdf_report("Review Report", headers, data, "review_report.pdf")


generate_user_report.short_description = "Download User Report"
generate_category_report.short_description = "Download Category Report"
generate_order_report.short_description = "Download Order Report"
generate_product_payment_report.short_description = "Download Product Payment Report"
generate_custom_cake_order_report.short_description = "Download Custom Cake Order Report"
generate_order_cancel_report.short_description = "Download Order Cancellation Report"
generate_order_cancel_details_report.short_description = "Download Order Cancellation Details Report"
generate_order_return_report.short_description = "Download Order Return Report"
generate_order_return_details_report.short_description = "Download Order Return Details Report"
generate_review_report.short_description = "Download Order Return Details Report"


def generate_user_chart(modeladmin, request, queryset):
    headers = ["Year of Birth", "User Count"]
    data = {}
    
    for user in queryset:
        year_of_birth = user.dob_date.year if user.dob_date else "Unknown"
        data[year_of_birth] = data.get(year_of_birth, 0) + 1
    
    formatted_data = [[year, count] for year, count in data.items()]
    return generate_chart_pdf("User Birth Year Distribution", headers, formatted_data, "user_chart.pdf")

generate_user_chart.short_description = "Download User Chart"




def generate_main_category_chart(modeladmin, request, queryset):
    headers = ["Main Category", "Product Count"]
    data = {}
    
    for category in queryset:
        data[category.name] = data.get(category.name, 0) + 1
    
    formatted_data = [[category, count] for category, count in data.items()]
    return generate_chart_pdf("Main Category Chart", headers, formatted_data, "main_category_chart.pdf")

generate_main_category_chart.short_description = "Download Main Category Chart"
def generate_sub_category_chart(modeladmin, request, queryset):
    headers = ["Sub Category", "Product Count"]
    data = {}
    
    for subcategory in queryset:
        data[subcategory.name] = data.get(subcategory.name, 0) + 1
    
    formatted_data = [[subcategory, count] for subcategory, count in data.items()]
    return generate_chart_pdf("Sub Category Chart", headers, formatted_data, "sub_category_chart.pdf")

generate_sub_category_chart.short_description = "Download Sub Category Chart"





def generate_product_chart(modeladmin, request, queryset):
    headers = ["Category", "Product Count"]
    data = {}
    
    for product in queryset:
        category = product.main_category.name if product.main_category else "Uncategorized"
        data[category] = data.get(category, 0) + 1
    
    formatted_data = [[category, count] for category, count in data.items()]
    return generate_chart_pdf("Product Chart", headers, formatted_data, "product_chart.pdf")

generate_product_chart.short_description = "Download Product Chart"

def generate_custom_cake_order_chart(modeladmin, request, queryset):
    headers = ["Cake Type", "Order Count"]
    data = {}

    for order in queryset:
        cake_type = order.cake_type or "Unknown Type"
        data[cake_type] = data.get(cake_type, 0) + 1

    formatted_data = [[cake_type, count] for cake_type, count in data.items()]
    return generate_chart_pdf("Custom Cake Orders by Cake Type", headers, formatted_data, "custom_cake_order_chart.pdf")

generate_custom_cake_order_chart.short_description = "Download Custom Cake Order Chart"

   
def generate_order_cancel_chart(modeladmin, request, queryset):
    headers = ["Cancel Reason", "Order Count"]
    data = {}

    for cancel in queryset:
        reason = cancel.cancel_reason or "Unknown Reason"
        data[reason] = data.get(reason, 0) + 1

    formatted_data = [[reason, count] for reason, count in data.items()]
    return generate_chart_pdf("Canceled Orders by Reason", headers, formatted_data, "order_cancel_chart.pdf")

generate_order_cancel_chart.short_description = "Download Canceled Orders Chart"

      
def generate_order_cancel_details_chart(modeladmin, request, queryset):
    headers = ["Product", "Canceled Quantity"]
    data = {}

    for cancel_detail in queryset:
        product = cancel_detail.product.name or "Unknown Product"
        data[product] = data.get(product, 0) + cancel_detail.quantity_canceled

    formatted_data = [[product, quantity] for product, quantity in data.items()]
    return generate_chart_pdf("Canceled Products by Quantity", headers, formatted_data, "order_cancel_details_chart.pdf")

generate_order_cancel_details_chart.short_description = "Download Canceled Products Chart"


def generate_order_return_details_chart(modeladmin, request, queryset):
    headers = ["Product", "Returned Quantity"]
    data = {}

    for return_detail in queryset:
        product = return_detail.order_detail.product.name or "Unknown Product"
        data[product] = data.get(product, 0) + return_detail.quantity_returned

    formatted_data = [[product, quantity] for product, quantity in data.items()]
    return generate_chart_pdf("Returned Products by Quantity", headers, formatted_data, "order_return_details_chart.pdf")

generate_order_return_details_chart.short_description = "Download Returned Products Chart"

def generate_review_chart(modeladmin, request, queryset):
    headers = ["Rating", "Review Count"]
    data = {}

    for review in queryset:
        rating = review.rating  # Assuming 'rating' is a numerical field like 1-5
        data[rating] = data.get(rating, 0) + 1
    
    formatted_data = [[rating, count] for rating, count in data.items()]
    return generate_chart_pdf("Review Rating Distribution", headers, formatted_data, "review_chart.pdf")

generate_review_chart.short_description = "Download Review Chart"



class UserAdmin(admin.ModelAdmin):
    list_display = ['user_id', 'first_name','email_id', 'contact_no', 'address','dob_date']  # Display these fields in the admin list view
    search_fields = ['first_name',  'email_id']  # Add search functionality
    list_filter = ['dob_date',] # Add filtering by date of birth

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button
    actions = [generate_user_report, generate_user_chart]  
      
admin.site.register(User,UserAdmin)

@admin.register(MainCategory)
class MainCategoryAdmin(admin.ModelAdmin):
    list_display = ('name',)  # Display the name of the category in the admin list
    search_fields = ('name',)  # Add search functionality to filter categories by name
    actions = [generate_category_report,generate_main_category_chart]


@admin.register(SubCategory)
class SubCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'main_category')  # Show the name and main category in the admin list
    search_fields = ('name',)  # Allow searching by subcategory name
    list_filter = ('main_category',)  # Filter subcategories by main category
    actions = [generate_category_report,generate_sub_category_chart]

class ProductIngredientInline(admin.TabularInline):  
    model = ProductIngredient  
    extra = 1  # Allows adding multiple ingredients directly in the Product admin page


class ProductAdmin(admin.ModelAdmin):
    list_display = ('product_id' ,'name', 'main_category', 'subcategory', 'price_options', 'stock', 'is_main_category_product')  # Display fields in list view
    list_filter = ('main_category', 'subcategory', 'is_main_category_product')  # Filter by main category, subcategory, and main category product flag
    search_fields = ('name', 'description')  # Allow search by name and description
    inlines = [ProductIngredientInline]
    # # Add inline editing for price options as JSON (if needed)
    # def price_options_display(self, obj):
    #     return ", ".join(obj.price_options)
    # price_options_display.short_description = 'Price Options'/
    # Display price options as a readable string
    def price_options_display(self, obj):
        return ", ".join(obj.price_options) if obj.price_options else "N/A"
    price_options_display.short_description = 'Price Options'
    actions = [generate_category_report, generate_product_chart]

admin.site.register(Product, ProductAdmin)

class ProductPaymentAdmin(admin.ModelAdmin):
    list_display = ('payment_id', 'payment_datetime', 'payment_method', 'total_amount', 'status','user')  # Columns in admin list view
    list_filter = ('status', 'payment_method')  # Filter by status and method
    search_fields = ('payment_id', 'payment_method')  # Searchable fields
    ordering = ('-payment_datetime',)  # Default sorting (latest first)
    actions = [generate_product_payment_report ,generate_payment_chart] 

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button
      
admin.site.register(ProductPayment, ProductPaymentAdmin)

@admin.register(CustomCakeOrder)
class CustomCakeOrderAdmin(admin.ModelAdmin):
    list_display = ('id', 'user', 'cake_type', 'size','admin_response', 'flavor', 'status', 'pickup_date', 'created_at')
    list_filter = ('status', 'pickup_date', 'created_at')
    search_fields = ('user__username', 'cake_type', 'flavor')
    ordering = ('-created_at',)
    readonly_fields = ('created_at',)
    list_editable = ('status',)  # Allows admin to change status directly in the list view
    fieldsets = (
        ('Customer Details', {'fields': ('user',)}),
        ('Cake Details', {'fields': ('cake_type', 'size', 'flavor', 'icing', 'filling', 'cake_layers')}),
        ('Customization', {'fields': ('cake_theme', 'allergy_info', 'message', 'additional_customization', 'photo')}),
        ('Order Details', {'fields': ('pickup_date', 'pickup_time', 'status', 'admin_response')}),
        ('Payment & Order', {'fields': ('payment', 'order')}),
    )
    actions = [generate_custom_cake_order_report,generate_custom_cake_order_chart] 
    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button



def send_order_status_update_email(order):
    subject = f"Order Update - Order {order.order_id} Status Changed"

    # Define colors and messages based on order status
    status_colors = {
        "Order Sent": "#ff9800",  # Orange
        "Accepted": "#4caf50",  # Green
        "Declined": "#f44336",  # Red
        "Processing": "#2196f3",  # Blue
        "Ready": "#9c27b0",  # Purple
        "Shipped": "#673ab7",  # Dark Purple
        "Delivered": "#2e7d32",  # Dark Green
        "Cancelled": "#d32f2f",  # Dark Red
    }

    status_messages = {
        "Order Sent": "Your order has been sent for processing. We will update you soon!",
        "Accepted": "Your order has been accepted! We are preparing your items.",
        "Declined": "We regret to inform you that your order has been declined. Please contact support for details.",
        "Processing": "Your order is being prepared. It will be ready soon.",
        "Ready": "Your order is ready for pickup or delivery.",
        "Shipped": "Your order has been shipped! It will reach you soon.",
        "Delivered": "Your order has been successfully delivered. Enjoy your treats!",
        "Cancelled": "unforchunatly, Your order has been cancelled. If this was a mistake, please contact support.",
    }

    # Get color and message based on status
    status_color = status_colors.get(order.delivery_status, "#333")  # Default color
    status_message = status_messages.get(order.delivery_status, "Your order status has been updated.")

    html_message = f"""
    <html>
    <head>
        <style>
            body {{
                font-family: Arial, sans-serif;
                background-color: #f8f9fa;
                padding: 20px;
            }}
            .container {{
                background-color: #ffffff;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0px 0px 10px rgba(0,0,0,0.1);
            }}
            h2 {{
                color: #333;
                text-align: center;
            }}
            table {{
                width: 100%;
                border-collapse: collapse;
                margin-top: 20px;
            }}
            th, td {{
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #ddd;
            }}
            th {{
                background-color: #c2a1a0;
                color: white;
            }}
            .status {{
                font-weight: bold;
                color: white;
                background-color: {status_color};
                padding: 8px 12px;
                border-radius: 5px;
                display: inline-block;
            }}
            .footer {{
                margin-top: 20px;
                text-align: center;
                font-size: 14px;
                color: #555;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <h2>Order Update - {order.user.first_name}</h2>
            <p>{status_message}</p>
            <table>
                <tr>
                    <th>Order ID</th>
                    <td>{order.order_id}</td>
                </tr>
                <tr>
                    <th>Updated Status</th>
                    <td><span class="status">{order.delivery_status}</span></td>
                </tr>
                <tr>
                    <th>Total Amount</th>
                    <td>₹{order.total_amount}</td>
                </tr>
                <tr>
                    <th>Payment Method</th>
                    <td>{order.payment.payment_method}</td>
                </tr>
                <tr>
                    <th>Shipping Address</th>
                    <td>{order.shipping_address if order.shipping_address else 'Default Address'}</td>
                </tr>
            </table>

            <p class="footer">
                If you have any questions, feel free to contact us.<br>
                <strong>Nova Bakers</strong> | Support: support@novabakers.com
            </p>
        </div>
    </body>
    </html>
    """

    send_mail(
        subject,
        "",
        settings.DEFAULT_FROM_EMAIL,
        [order.user.email_id],
        fail_silently=False,
        html_message=html_message,  
    )


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ('order_id', 'user', 'order_datetime', 'delivery_status', 'total_amount', 'discount', 'discount_amount', 'payment')  
    list_filter = ('delivery_status', 'order_datetime', 'discount')  
    search_fields = ('order_id', 'user__first_name', 'user__email_id')  
    ordering = ('-order_datetime',)  
    list_editable = ('delivery_status',)  
    readonly_fields = ('order_id', 'order_datetime')  # Prevent modification of these fields
  
    actions = [generate_order_report, generate_order_chart]

    fieldsets = (
        ("Order Information", {
            "fields": ("order_id", "user", "order_datetime", "delivery_status", "total_amount", "payment")
        }),
        ("Shipping Details", {
            "fields": ("is_different_address", "shipping_address")
        }),
        ("Discount Details", {
            "fields": ("discount", "discount_amount")
        }),
    )

    def save_model(self, request, obj, form, change):
        if change:  
            old_order = Order.objects.get(pk=obj.pk)  
            if old_order.delivery_status != obj.delivery_status:  
                send_order_status_update_email(obj)  

        super().save_model(request, obj, form, change) 

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button

@admin.register(OrderDetails)
class OrderDetailsAdmin(admin.ModelAdmin):
    list_display = ('order_detail_id', 'order', 'product', 'quantity', 'cake_customization', 'selected_price_option')
    search_fields = ('order__order_id', 'product__name')
    list_filter = ('order__delivery_status',)

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button

@admin.register(OrderCancel)
class OrderCancelAdmin(admin.ModelAdmin):
    list_display = ('cancel_id', 'order',  'cancel_datetime')
    list_filter = ( 'cancel_datetime',)
    search_fields = ('order__order_id',)
    actions = [generate_order_cancel_report,generate_order_cancel_chart] 

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button

@admin.register(OrderReturnDetails)
class OrderReturnDetailsAdmin(admin.ModelAdmin):
    list_display = ('return_detail_id', 'return_reason', 'return_status','order_return', 'order_detail', 'quantity_returned', 'refund_status')
    search_fields = ('return_status','order_return__order__order_id', 'refund_status', 'order_detail__product__name')
    list_filter = ('order_return__return_datetime', 'return_status',)
    list_editable = ('refund_status',)
    actions = [generate_order_return_details_report,generate_order_return_details_chart] 

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button
    
@admin.register(OrderCancelDetails)
class OrderCancelDetailsAdmin(admin.ModelAdmin):
    list_display = ('cancel_detail_id', 'cancel', 'order_detail', 'product', 'cancel_reason','quantity_canceled', 'refund_status','refund_amount')  # Added 'product'
    search_fields = ('cancel__order__order_id',  'refund_status','order_detail__product__name', 'product__name')  # Added 'product__name'
    list_filter = ('cancel__cancel_datetime', 'refund_status','product',)  # Added 'product' for filtering by product'
    list_editable = ('refund_status',)
    actions = [generate_order_cancel_details_report,generate_order_cancel_details_chart] 
    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button

@admin.register(OrderReturn)
class OrderReturnAdmin(admin.ModelAdmin):
    list_display = ('return_id', 'order',  'return_datetime')
    list_filter = ( 'return_datetime',)
    search_fields = ('order__order_id',)
    actions = [generate_order_return_report] 

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button

@admin.register(Shop)
class ShopAdmin(admin.ModelAdmin):
    list_display = ('shop_name', 'shop_address', 'email_id', 'mobile_no', 'image')
    search_fields = ('shop_name', 'email_id', 'mobile_no')

class ReviewAdmin(admin.ModelAdmin):
    list_display = ('product', 'user', 'rating', 'created_at','comment','photo')  # Display these fields in the admin list
    list_filter = ('rating', 'created_at')  # Add filters for rating and date
    search_fields = ('user__username', 'product__name', 'comment')  # Allow searching by user, product, and comment
    ordering = ('-created_at',)  # Show latest reviews first
    actions = [generate_review_report,generate_review_chart]

    def has_add_permission(self, request):
        return False  # ✅ This removes the "Add" button
admin.site.register(Review, ReviewAdmin)

@admin.register(Discount)
class DiscountAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_type', 'value', 'min_order_amount', 'max_discount', 'start_date', 'end_date', 'is_active')
    list_filter = ('discount_type', 'is_active', 'start_date', 'end_date')
    search_fields = ('code',)
    ordering = ('-start_date',)
    readonly_fields = ('discount_id',)  # Keep discount_id read-only

    fieldsets = (
        ("Discount Details", {
            "fields": ("code", "discount_type", "value", "min_order_amount", "max_discount", "is_active")
        }),
        ("Validity", {
            "fields": ("start_date", "end_date")
        }),
    )

@admin.register(Ingredient)
class IngredientAdmin(admin.ModelAdmin):
    list_display = ("name",)
    search_fields = ("name",)

@admin.register(ProductIngredient)
class ProductIngredientAdmin(admin.ModelAdmin):
    list_display = ("product", "ingredient", "description")
    list_filter = ("ingredient",)
    search_fields = ("product__name", "ingredient__name", "description")

from django.contrib import admin
from .models import ProductInquiry

class ProductInquiryAdmin(admin.ModelAdmin):
    list_display = ('user', 'product', 'question', 'response', 'created_at')
    list_filter = ('created_at', 'product')
    search_fields = ('user__username', 'product__name', 'question', 'response')
    readonly_fields = ('user', 'product', 'question', 'created_at')  # Make these fields read-only
    fields = ('user', 'product', 'question', 'response', 'created_at')

    def has_add_permission(self, request):
        return False  # Prevent adding inquiries from admin panel

admin.site.register(ProductInquiry, ProductInquiryAdmin)
